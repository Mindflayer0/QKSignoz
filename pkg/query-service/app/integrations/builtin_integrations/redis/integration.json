{
  "id": "redis",
  "title": "Redis",
  "description": "Monitor redis using logs and connection and request metrics.",
  "author": {
    "name": "SigNoz",
    "email": "integrations@signoz.io",
    "homepage": "https://signoz.io"
  },
  "icon": "file://icon.svg",
  "categories": [
    "Ingress",
    "HTTP"
  ],
  "overview": "file://overview.md",
  "configuration": [
    {
      "title": "Prepare Redis",
      "instructions": "file://config/prepare-redis.md"
    },
    {
      "title": "Configure Otel Collector",
      "instructions": "file://config/configure-otel-collector.md"
    }
  ],
  "assets": {
    "logs": {
      "pipelines": [
        {
          "id": "parse-default-redis-access-log",
          "name": "Parse default redis access log",
          "alias": "parse-default-redis-access-log",
          "description": "Parse standard redis access log",
          "enabled": true,
          "filter": {
            "op": "AND",
            "items": [
              {
                "key": {
                  "type": "tag",
                  "key": "source",
                  "data_type": "string"
                },
                "op": "=",
                "value": "redis"
              }
            ]
          },
          "config": [
            {
              "type": "grok_parser",
              "id": "parse-body-grok",
              "enabled": true,
              "orderId": 1,
              "name": "Parse Body",
              "parse_to": "attributes",
              "pattern": "%{IP:client.address} - %{USERNAME:enduser.id} \\[%{HTTPDATE:time.local}\\] \"((%{WORD:http.method} %{DATA:http.path}(\\?%{DATA:http.query})? %{WORD:network.protocol.name}/%{NOTSPACE:network.protocol.version})|%{DATA})\" %{INT:http.response.status_code:int} %{INT:http.request.body.bytes:int} \"%{NOTSPACE:http.referer}\" \"%{DATA:http.user.agent}\" %{INT:http.request.bytes:int} %{NUMBER:http.request.time:float} \\[%{DATA:proxy.upstream.name}?\\] \\[%{DATA:proxy.alternative.upstream.name}?\\] ((%{IP:network.peer.address}:%{INT:network.peer.port:int})|%{DATA})? (%{INT:http.response.bytes:int}|-)? (%{NUMBER:http.response.time:float}|-)? (%{NUMBER:network.peer.status.code:int}|-)? %{NOTSPACE:request.id}",
              "parse_from": "body"
            },
            {
              "type": "severity_parser",
              "id": "parse-sev",
              "enabled": true,
              "orderId": 2,
              "name": "Set Severity",
              "parse_from": "attributes[\"http.response.status_code\"]",
              "mapping": {
                "debug": [
                  "1xx"
                ],
                "error": [
                  "4xx"
                ],
                "fatal": [
                  "5xx"
                ],
                "info": [
                  "2xx"
                ],
                "trace": [
                  "trace"
                ],
                "warn": [
                  "3xx"
                ]
              },
              "overwrite_text": true
            }
          ]
        }
      ]
    },
    "dashboards": null,
    "alerts": null
  },
  "connection_tests": {
    "logs": {
      "op": "AND",
      "items": [
        {
          "key": {
            "type": "tag",
            "key": "source",
            "data_type": "string"
          },
          "op": "=",
          "value": "redis"
        }
      ]
    }
  },
  "data_collected": {
    "logs": [
      {
        "name": "Request Method",
        "path": "attributes[\"http.request.method\"]",
        "type": "string",
        "description": "HTTP method"
      },
      {
        "name": "Request Path",
        "path": "attributes[\"url.path\"]",
        "type": "string",
        "description": "path requested"
      },
      {
        "name": "Response Status Code",
        "path": "attributes[\"http.response.status_code\"]",
        "type": "int",
        "description": "HTTP response code"
      }
    ],
    "metrics": [
      {
        "name": "http.server.request.duration",
        "type": "Histogram",
        "unit": "s",
        "description": "Duration of HTTP server requests"
      },
      {
        "name": "http.server.active_requests",
        "type": "UpDownCounter",
        "unit": "{ request }",
        "description": "Number of active HTTP server requests"
      }
    ]
  }
}
