name: build-pipeline
on:
  pull_request:
    branches:
      - master
      - v*
      - add-gh-workflow
    paths:
      - 'pkg/**'
      - 'frontend/**'

jobs:
  get_filters:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      query-service: ${{ steps.filter.outputs.query-service }}
      flattener: ${{ steps.filter.outputs.flattener }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          frontend:
            - 'frontend/**'
          query-service:
            - 'pkg/query-service/**'
          flattener:
            - 'pkg/processors/flattener/**'
  code-quality-checks:
    runs-on: ubuntu-latest
    needs: get_filters
    if: needs.get_filters.outputs.frontend == 'true' || needs.get_filters.outputs.query-service == 'true' || needs.get_filters.outputs.flattener == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Code quality check for frontend
        shell: bash
        run: |
          cd frontend
          @echo "------------------"
          @echo "--> checking code style [frontend]"
          @echo "------------------"
          npm i eslint --no-save && npm run lint
      - name: Code quality check for query-service
        shell: bash
        run: |
          cd pkg/query-service
          @echo "------------------"
          @echo "--> checking code style [query-service]"
          @echo "------------------"
          @fmtRes=$$(gofmt -d $$(find . -path ./vendor -prune -o -name '*.go' -print)); \
          if [ -n "$${fmtRes}" ]; then \
            echo "gofmt checking failed!" && echo "$${fmtRes}" \
            && echo "Please ensure you are using $$($(GO) version) for formatting code." \
            && exit 1;\
          fi
      - name: Code quality check for flattener
        shell: bash
        run: |
          cd pkg/processors/flattener
          @echo "------------------"
          @echo "--> checking code style [flattener]"
          @echo "------------------"
          @fmtRes=$$(gofmt -d $$(find . -path ./vendor -prune -o -name '*.go' -print)); \
          if [ -n "$${fmtRes}" ]; then \
            echo "gofmt checking failed!" && echo "$${fmtRes}" \
            && echo "Please ensure you are using $$($(GO) version) for formatting code." \
            && exit 1;\
          fi


  build-frontend:
    runs-on: ubuntu-latest
    needs:
      - code-quality-checks
      - get_filters
    if: ${{ needs.get_filters.outputs.frontend == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build frontend docker image
        shell: bash
        run: |
          cd frontend
          docker build . -f Dockerfile
  build-query-service:
    runs-on: ubuntu-latest
    needs:
      - code-quality-checks
      - get_filters
    if: ${{ needs.get_filters.outputs.query-service == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build  query-service image
        shell: bash
        run: |
          cd pkg/query-service
          docker build . -f Dockerfile
  build-flattener:
    runs-on: ubuntu-latest
    needs:
      - code-quality-checks
      - get_filters
    if: ${{ needs.get_filters.outputs.flattener == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build flattener docker image
        shell: bash
        run: |
          cd pkg/processors/flattener
          docker build . -f Dockerfile
